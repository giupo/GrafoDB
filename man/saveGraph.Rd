% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/old_grafo_impl.r
\name{saveGraph}
\alias{saveGraph}
\title{Salva il grafo}
\usage{
saveGraph(object)
}
\arguments{
\item{object}{istanza di `GrafoDB`}

\item{path}{erroneamente, dovuta al generic su `grafo` questo sarebbe il "tag" da
dare al grafo. Non c'e' modo di ovviare questo problema. Vedere il
prototipo di funzione di `.saveGraph`, e' sicuramente piu' chiaro.}

\item{...}{Parametri aggiuntivi alla `saveGraph`}
}
\description{
Implementazione di saveGraph per `GrafoDB` dal package `grafo`
}
\details{
La funzione si preoccupa di serializzare la transazione al DB, e controllare
l'eventualita' di Conflitti, segnalandoli all'utenza.

Funzione per salvare un grafo

La funzione controlla la presenza di eventuali conflitti e necessita'
di risincronizzare i dati del DB con quelli presenti nel Grafo.

\itemize{
 \item{"1"}{
     Identificare le serie aggregate (solo formule) - primitive (solo dati)
     cambiate, escludendo eventuali conflitti}
  \item{"2"}{Caricarle nel grafo}
  \item{"3"}{Rieseguirle}
  \item{"4"}{Risalvare il grafo}
}

La funzione controlla se esistono conflitti nel seguente modo:
\itemize{
  \item{"dati"}{
       Se esistono serie primitive nel DB e nel grafo
       in sessione che sono state aggiornate in
       contemporanea}
  \item{"formule"}{
       Se esistono formule nel DB e nel grafo in
       sessione aggiornati in contemporanea}
}

Qualora uno dei due casi si verificasse il grafo va in "conflitto",
vengono salvate sia le proprie modifiche che le modifiche fatte da
altri e si attende la risoluzione del conflitto attraverso i metodi
`fixConflict`. La soluzione dei conflitti non e' un atto di fede:
occorre incontrarsi e decidere quale "formula" o quale versione dei dati
sia da preferire.
}
\note{
R sucks sometimes. \url{https://osiride-public.utenze.bankit.it/group/894smf/trac/cfin/ticket/31849}
}
\seealso{
.saveGraph
}
